AJS.test.require(["jira.webresources:jira-global","jira.webresources:searchers"],function(){var e=require("jquery"),t=require("jira/searchers/datesearcher/date-searcher-factory");module("JIRA.DueDateSearcher",{setup:function(){function s(t,s,u,o){i&&i.remove(),n.$el=i=e('<div data-field-name="my-date" class="js-date-searcher">\n    <input type="text" class="js-date-picker-start-date" name="duedate:after" />\n    <input type="text" class="js-date-picker-end-date" name="duedate:before"/>\n    <input type="text" class="js-date-picker-from" name="duedate:previous"/>\n    <input type="text" class="js-date-picker-to" name="duedate:next"/>\n</div>').appendTo("body"),a=i.find(".js-date-picker-from").val(""),h=i.find(".js-date-picker-to").val(""),d=i.find(".js-date-picker-start-date").val(""),r=i.find(".js-date-picker-end-date").val(""),void 0!==t&&a.val(t),void 0!==s&&h.val(s),void 0!==u&&d.val(u),void 0!==o&&r.val(o)}var i,a,h,d,r,n=this;this.DATE_TYPES={nowOverdue:"nowOverdue",dueInNext:"dueInNext",dateBetween:"dateBetween",moreThan:"moreThan",inRange:"inRange",withinTheLast:"withinTheLast"},this.tester={setupDueDate:function(e,a,h,d){s(e,a,h,d),t.createDueDateSearcher(i[0])},setup:function(e,a,h,d){s(e,a,h,d),t.createCustomDateSearcher(i[0])},setFields:function(t){var s=Array.prototype.slice.call(arguments);s=s.slice(1,s.length);var a=i.find(".field-group[data-date-type='"+t+"']");a.find(":input:not(:radio)").each(function(t){e(this).val(s[t])}),a.find(":radio").prop("checked",!0).trigger("change")}},this.assert={noRadioChecked:function(){ok(0===i.find(":radio[checked]").length,"Expected no radio button to be checked")},noTextValues:function(){i.find(":text").each(function(){e(this).val()&&equal("",e(this).val())})},fieldValues:function(e){var t=Array.prototype.slice.call(arguments);t=t.slice(1,t.length);var s=[];i.find(".field-group[data-date-type='"+e+"']").find(":input:not(:radio)").each(function(){s.push(this.value)}),equal(JSON.stringify(s),JSON.stringify(t))},radioChecked:function(e){ok(1===i.find(".field-group[data-date-type='"+e+"']").find(":radio[checked]").length,"Expected radio for dat type ["+e+"] to be checked"),ok(1===i.find(":radio[checked]").length,"No other radios should be checked at the same time")},submitVals:function(e,t,s,i){equal(a.val(),e,"Expected 'from' value to be ["+e+"] but was ["+a.val()+"]"),equal(h.val(),t,"Expected 'to' value to be ["+t+"] but was ["+h.val()+"]"),equal(d.val(),s,"Expected 'dateStart' value to be ["+s+"] but was ["+d.val()+"]"),equal(r.val(),i,"Expected 'dateStart' value to be ["+i+"] but was ["+r.val()+"]")}},sinon.stub(AJS,"format",function(){return Array.prototype.join.call(arguments,"")})},teardown:function(){this.$el.remove(),AJS.format.restore()}}),test("Restoring: no state",function(){this.tester.setup(),this.assert.noRadioChecked(),this.assert.noTextValues()}),test("Restoring: more than",function(){this.tester.setup(void 0,"-5d"),this.assert.radioChecked(this.DATE_TYPES.moreThan),this.assert.fieldValues(this.DATE_TYPES.moreThan,"5","d"),this.tester.setup(void 0,"-10w"),this.assert.fieldValues(this.DATE_TYPES.moreThan,"10","w"),this.tester.setup(void 0,"-fdgsfdmm"),this.assert.fieldValues(this.DATE_TYPES.moreThan,"fdgsfdm","m"),this.tester.setup(void 0,"--10w"),this.assert.fieldValues(this.DATE_TYPES.moreThan,"-10","w"),this.tester.setup(void 0,"-mmm"),this.assert.fieldValues(this.DATE_TYPES.moreThan,"mm","m")}),test("Restoring: withinTheLast",function(){this.tester.setup("-5d"),this.assert.radioChecked(this.DATE_TYPES.withinTheLast),this.assert.fieldValues(this.DATE_TYPES.withinTheLast,"5","d")}),test("Restoring: date between",function(){this.tester.setup(void 0,void 0,"14/Dec/12","15/Dec/12"),this.assert.radioChecked(this.DATE_TYPES.dateBetween),this.assert.fieldValues(this.DATE_TYPES.dateBetween,"14/Dec/12","15/Dec/12"),this.tester.setup(void 0,void 0,void 0,"16/Dec/12"),this.assert.fieldValues(this.DATE_TYPES.dateBetween,"","16/Dec/12"),this.tester.setup(void 0,void 0,"17/Dec/12"),this.assert.fieldValues(this.DATE_TYPES.dateBetween,"17/Dec/12","")}),test("Restoring: range",function(){this.tester.setup("-5h","5h"),this.assert.radioChecked(this.DATE_TYPES.inRange),this.assert.fieldValues(this.DATE_TYPES.inRange,"-5h","5h"),this.tester.setup("3m"),this.assert.radioChecked(this.DATE_TYPES.inRange),this.assert.fieldValues(this.DATE_TYPES.inRange,"3m","")}),test("Setting: more than",function(){this.tester.setup(),this.tester.setFields(this.DATE_TYPES.moreThan,5,"d"),this.assert.submitVals("","-5d","",""),this.tester.setFields(this.DATE_TYPES.moreThan,10,"w"),this.assert.submitVals("","-10w","","")}),test("Setting: withinTheLast",function(){this.tester.setup(),this.tester.setFields(this.DATE_TYPES.withinTheLast,5,"d"),this.assert.submitVals("-5d","","",""),this.tester.setFields(this.DATE_TYPES.withinTheLast,10,"w"),this.assert.submitVals("-10w","","","")}),test("Setting: date between",function(){this.tester.setup(void 0,void 0,"14/08/2012","15/08/2012"),this.tester.setFields(this.DATE_TYPES.dateBetween,"16/08/2012","17/08/2012"),this.assert.submitVals("","","16/08/2012","17/08/2012"),this.tester.setFields(this.DATE_TYPES.dateBetween,"","19/08/2012"),this.assert.submitVals("","","","19/08/2012"),this.tester.setFields(this.DATE_TYPES.dateBetween,"20/08/2012",""),this.assert.submitVals("","","20/08/2012","")}),test("Setting: range",function(){this.tester.setup("-5h","5h"),this.tester.setFields(this.DATE_TYPES.inRange,"-20h","17w"),this.assert.submitVals("-20h","17w","","")}),test("Restoring Due Date: no state",function(){this.tester.setupDueDate(),this.assert.noRadioChecked(),this.assert.noTextValues()}),test("Restoring Due Date: now overdue",function(){this.tester.setupDueDate(void 0,0),this.assert.radioChecked(this.DATE_TYPES.nowOverdue)}),test("Restoring Due Date: more than",function(){this.tester.setupDueDate(void 0,"-5d"),this.assert.radioChecked(this.DATE_TYPES.moreThan),this.assert.fieldValues(this.DATE_TYPES.moreThan,"5","d"),this.tester.setupDueDate(void 0,"-10w"),this.assert.fieldValues(this.DATE_TYPES.moreThan,"10","w"),this.tester.setupDueDate(void 0,"-fdgsfdm"),this.assert.fieldValues(this.DATE_TYPES.moreThan,"fdgsfd","m")}),test("Restoring Due Date: due in next",function(){this.tester.setupDueDate(void 0,"5d"),this.assert.radioChecked(this.DATE_TYPES.dueInNext),this.assert.fieldValues(this.DATE_TYPES.dueInNext,"5","d","orIs"),this.tester.setupDueDate(void 0,"10w"),this.assert.fieldValues(this.DATE_TYPES.dueInNext,"10","w","orIs"),this.tester.setupDueDate("0","10w"),this.assert.fieldValues(this.DATE_TYPES.dueInNext,"10","w","andNot"),this.tester.setupDueDate(void 0,"fdgsfdsm"),this.assert.fieldValues(this.DATE_TYPES.dueInNext,"fdgsfds","m","orIs")}),test("Restoring Due Date: date between",function(){this.tester.setupDueDate(void 0,void 0,"14/Dec/12","15/Dec/12"),this.assert.radioChecked(this.DATE_TYPES.dateBetween),this.assert.fieldValues(this.DATE_TYPES.dateBetween,"14/Dec/12","15/Dec/12"),this.tester.setupDueDate(void 0,void 0,void 0,"16/Dec/12"),this.assert.fieldValues(this.DATE_TYPES.dateBetween,"","16/Dec/12"),this.tester.setupDueDate(void 0,void 0,"17/Dec/12"),this.assert.fieldValues(this.DATE_TYPES.dateBetween,"17/Dec/12","")}),test("Restoring Due Date: range",function(){this.tester.setupDueDate("-5h","5h"),this.assert.radioChecked(this.DATE_TYPES.inRange),this.assert.fieldValues(this.DATE_TYPES.inRange,"-5h","5h"),this.tester.setupDueDate("3m"),this.assert.radioChecked(this.DATE_TYPES.inRange),this.assert.fieldValues(this.DATE_TYPES.inRange,"3m","")}),test("Setting Due Date: now overdue",function(){this.tester.setupDueDate(void 0,"-5d"),this.tester.setFields(this.DATE_TYPES.nowOverdue),this.assert.submitVals("",0,"","")}),test("Setting Due Date: more than",function(){this.tester.setupDueDate(),this.tester.setFields(this.DATE_TYPES.moreThan,5,"d"),this.assert.submitVals("","-5d","",""),this.tester.setFields(this.DATE_TYPES.moreThan,10,"w"),this.assert.submitVals("","-10w","","")}),test("Setting: due in next",function(){this.tester.setupDueDate(void 0,void 0,"2012/08/14","2012/08/15"),this.tester.setFields(this.DATE_TYPES.dueInNext,5,"d"),this.assert.submitVals("","5d","",""),this.tester.setFields(this.DATE_TYPES.dueInNext,10,"w","andNot"),this.assert.submitVals("0","10w","","")}),test("Setting Due Date: date between",function(){this.tester.setupDueDate(void 0,void 0,"14/08/2012","15/08/2012"),this.tester.setFields(this.DATE_TYPES.dateBetween,"16/08/2012","17/08/2012"),this.assert.submitVals("","","16/08/2012","17/08/2012"),this.tester.setFields(this.DATE_TYPES.dateBetween,"","19/08/2012"),this.assert.submitVals("","","","19/08/2012"),this.tester.setFields(this.DATE_TYPES.dateBetween,"20/08/2012",""),this.assert.submitVals("","","20/08/2012","")}),test("Setting Due Date: range",function(){this.tester.setupDueDate("-5h","5h"),this.tester.setFields(this.DATE_TYPES.inRange,"-20h","17w"),this.assert.submitVals("-20h","17w","","")})});