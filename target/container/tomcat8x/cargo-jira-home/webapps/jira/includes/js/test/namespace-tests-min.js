var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};AJS.test.require(["jira.webresources:lecacy-namespacing"],function(){function e(e){module("AJS.namespace"+(e?" (Object.defineProperty)":" (all browsers)"),{setup:function(){this.config={hasDefineProperty:e,logDeprecationNotice:!1,noGlobals:!1},this.logger=sinon.spy(),this.context=AJS.test.mockableModuleContext(),this.context.mock("jira/legacy/config",this.config),this.context.mock("jira/legacy/logger",this.logger),equal(_typeof(window.foo),"undefined","there should be no global object yet")},teardown:function(){window.foo&&delete window.foo}}),test("creates objects in the global namespace",function(){this.context.require("jira/legacy/namespace")("foo.bar.baz"),equal(_typeof(window.foo.bar.baz),"object","should create a global object"),ok(this.logger.notCalled,"no messages output in production")}),test("adds values to window by default",function(){var e=this.context.require("jira/legacy/namespace"),o=function(){};e("foo.bar.baz",null,o),equal(window.foo.bar.baz,o,"should place the function in window"),ok(this.logger.notCalled,"no messages output in production")}),test("adds values to specified locations",function(){var e=this.context.require("jira/legacy/namespace"),o=function(){},t={};e("foo.bar.baz",t,o),equal(t.foo.bar.baz,o,"should place the function in our specified context"),ok(this.logger.notCalled,"no messages output in production")}),test("does not destroy other values on namespace when creating new ones",function(){var e=this.context.require("jira/legacy/namespace"),o=function(){},t={};t.foo=function(){},t.foo.bar=function(){},t.foo.bar.anotherValue=!0,e("foo.bar.baz",t,o),equal(t.foo.bar.baz,o,"should place the function in our specified context"),equal(_typeof(t.foo),"function","should not have overridden the value of foo"),equal(_typeof(t.foo.bar),"function","should not have overridden the value of bar"),equal(_typeof(t.foo.bar.anotherValue),"boolean","should not have overridden other values on foo.bar")}),test("overrides previous value when creating new one",function(){var e=this.context.require("jira/legacy/namespace"),o=function(){},t={foo:{bar:{baz:{subValue:!0}}}};e("foo.bar.baz",t,o),equal(_typeof(t.foo.bar.baz),"function","value of foo.bar.baz was replaced"),equal(_typeof(t.foo.bar.baz.subValue),"undefined","does not preserve subValue")})}var o=require("jira/legacy/config");e(!1),o.hasDefineProperty&&e(!0),module("AJS.namespace deprecations (all browsers)",{setup:function(){this.config={hasDefineProperty:!1,logDeprecationNotice:!0,noGlobals:!1},this.logger=sinon.spy(),this.context=AJS.test.mockableModuleContext(),this.context.mock("jira/legacy/config",this.config),this.context.mock("jira/legacy/logger",this.logger),ok(_typeof(window.foo),"undefined","there should be no global object yet")},teardown:function(){window.foo&&delete window.foo}}),test("logs deprecation notice if the setting is enabled in config",function(){this.context.require("jira/legacy/namespace")("foo.bar.baz",null,function(){}),sinon.assert.calledOnce(this.logger),sinon.assert.calledWith(this.logger,"DEPRECATED: The global object foo.bar.baz is deprecated.")}),test("logs alternative usage if value provided via require()",function(){var e=function(){},o=this.context.require("jira/legacy/namespace");define("a/fake/module",function(){return e}),o("foo.bar.baz",null,require("a/fake/module")),equal(window.foo.bar.baz,e,"the value of the module is on the global namespace"),sinon.assert.calledOnce(this.logger),sinon.assert.calledWith(this.logger,'DEPRECATED: The global object foo.bar.baz is deprecated. Please use require(["a/fake/module"]) instead.')}),test("does NOT output a value when noGlobals is enabled in config",function(){this.config.noGlobals=!0,this.context.require("jira/legacy/namespace")("foo.bar.baz",null,function(){}),equal(_typeof(window.foo),"undefined","object was not created"),sinon.assert.calledOnce(this.logger),sinon.assert.calledWith(this.logger,"GONE: The global object foo.bar.baz was not created!")}),o.hasDefineProperty&&(module("AJS.namespace deprecations (Object.defineProperty)",{setup:function(){this.config={hasDefineProperty:!0,logDeprecationNotice:!0,noGlobals:!1},this.logger=sinon.spy(),this.context=AJS.test.mockableModuleContext(),this.context.mock("jira/legacy/config",this.config),this.context.mock("jira/legacy/logger",this.logger),ok(_typeof(window.foo),"undefined","there should be no global object yet")},teardown:function(){window.foo&&delete window.foo}}),test("logs deprecation notice on access if the setting is enabled in config",function(){this.context.require("jira/legacy/namespace")("foo.bar.baz",null,sinon.spy()),sinon.assert.notCalled(this.logger),window.foo.bar.baz(),sinon.assert.calledOnce(this.logger),sinon.assert.calledWith(this.logger,"DEPRECATED: The global object foo.bar.baz is deprecated.")}))});