AJS.test.require(["jira.webresources:jira-setup"],function(){"use strict";var e=require("jquery"),t=require("jira/flag"),s=require("wrm/context-path");module("jira/setup/setup-license",{setup:function(){this.fixture=e("#qunit-fixture"),this.fixture.append(JIRA.Templates.LicenseSetup.pageMockForQUnit({macLicense:"AAA"})),this.sandbox=sinon.sandbox.create({useFakeTimers:!0,useFakeServer:!0}),this.sandbox.stub(t,"showSuccessMsg"),this.setupLicenseModule=require("jira/setup/setup-license")},teardown:function(){this.sandbox.restore()},find:function(e){return this.fixture.find(e)},getSubmitButton:function(){return this.find("input[type=submit]").eq(0)},startPage:function(){this.setupLicenseModule.startPage(),this.sandbox.clock.tick(1e3)}}),test("existing license form: submit button should be enabled by default",function(){this.startPage(),equal(this.getSubmitButton().is(":disabled"),!1,"submit button should be enabled by default")}),test("existing license form: m.a.c license is copied into the textarea",function(){this.startPage(),equal(this.find("#licenseKey").html(),"AAA","License from m.a.c was not copied to the textarea")}),test("existing license form: submit button is disabled while form is being submitted",function(){this.startPage(),this.find("#importLicenseForm").submit(),equal(this.getSubmitButton().is(":disabled"),!0,"submit button should be disabled")}),test("existing license form: error is displayed if license submitted is invalid (HTTP 403)",function(){var e="The license you submitted is invalid and other stuff the server would probably say.";this.startPage(),this.find("#licenseKey").val("foo"),this.find("#importLicenseForm").submit();var t=this.sandbox.server.requests[0];equal(t instanceof Object,!0,"should make an AJAX server request upon submit"),equal(t.url,s()+"/secure/SetupLicense!validateLicense.jspa","should send to the right location and not include license details in the URL"),equal(t.requestBody,"licenseToValidate=foo","should send the license data in the multipart-form portion of the POST"),t.respond(403,{"Content-Type":"application/json"},JSON.stringify({errors:[e]})),equal(this.find("#formError").text(),"setup.importlicense.validation.failure.header"+e)}),[200,201,204,304].forEach(function(e){test("existing license form: form will submit if the server responds with a success HTTP code of "+e,function(){var t=this.sandbox.stub().returns(!1);this.startPage(),this.find("#setupLicenseForm").get(0).onsubmit=t,this.find("#importLicenseForm").submit();var i=this.sandbox.server.requests[0];equal(i instanceof Object,!0,"should make an AJAX server request upon submit"),equal(i.url,s()+"/secure/SetupLicense!validateLicense.jspa","should send to the right location and not include license details in the URL"),i.respond(e,{"Content-Type":"application/json"},JSON.stringify({})),equal(t.callCount,1,"form should have been submitted")})}),[300,301,302,400,401,404,500,501,503].forEach(function(e){test("existing license form: form will NOT submit if the server responds with a failure HTTP code of "+e,function(){var t=this.sandbox.stub().returns(!1);this.startPage(),this.find("#setupLicenseForm").get(0).onsubmit=t,this.find("#importLicenseForm").submit();var i=this.sandbox.server.requests[0];equal(i instanceof Object,!0,"should make an AJAX server request upon submit"),equal(i.url,s()+"/secure/SetupLicense!validateLicense.jspa","should send to the right location and not include license details in the URL"),i.respond(e,{"Content-Type":"application/json"},JSON.stringify({errors:["An HTTP "+e+" is a failure state"]})),equal(t.callCount,0,"form should NOT have been submitted")})})});