AJS.test.require("jira.webresources:jira-setup",function(){function e(e){i("#qunit-fixture").empty().append(i("<div></div>").addClass("jira-setup-basic-form").html(e))}var i=require("jquery"),s=require("underscore"),t=require("jira/setup/setup-account-view"),n=require("jira/flag"),a=sinon.assert,r=sinon.match,o={invalidEmail:"invalidEmail",emailRequired:"emailRequired",passwordRequired:"passwordRequired",usernameRequired:"usernameRequired",invalidUsername:"invalidUsername",tooLongUsername:"tooLongUsername",passwordRetypeRequired:"passwordRetypeRequired",passwordsDoNotMatch:"passwordsDoNotMatch"},u={successTitle:"successTitle",successContent:"successContent",errorTitle:"errorTitle",errorContent:"errorContent"},l=JIRA.Templates.Setup.Account.pageContent({productLicense:"SomeLicenseText",errorTextsJson:JSON.stringify(o),licenseFlagTextsJson:JSON.stringify(u)}),d=function(e,i){e.val(i),e.trigger("input"),e.trigger("blur")},h=function(e){return e.siblings(".error")},c=function(e){var i=h(e);return equal(i.hasClass("hidden"),!0,"Errors container is visible"),i},b=function(e){var i=h(e);return equal(i.hasClass("hidden"),!1,"Errors container is not visible"),i},m=function(e){return b(e).html()};module("JIRA Instant Setup Admin Account",{setup:function(){this.sandbox=sinon.sandbox.create({useFakeTimers:!0}),this.sandbox.stub(n,"showSuccessMsg"),e(l)},teardown:function(){this.sandbox.restore()},initializeView:function(){this.testObj=new t({el:".setup-account-view-container"}),this.testObj.bindUIElements()}}),test("submit button should be disabled when no license is present",function(){e(JIRA.Templates.Setup.Account.pageContent({})),this.sandbox.stub(n,"showErrorMsg"),this.initializeView(),equal(this.testObj.ui.submitButton.is(":disabled"),!0,"submit button is disabled by default")}),test("error flag should be displayed when no license is present",function(){e(JIRA.Templates.Setup.Account.pageContent({licenseFlagTextsJson:JSON.stringify(u)})),this.sandbox.stub(n,"showErrorMsg"),this.initializeView(),this.sandbox.clock.tick(t.FLAG_TIMEOUT-1),a.notCalled(n.showErrorMsg),this.sandbox.clock.tick(1),a.calledOnce(n.showErrorMsg),a.calledWith(n.showErrorMsg,u.errorTitle,u.errorContent,r({close:"never"}))}),test("submit button should be enabled when license is provided",function(){this.initializeView(),equal(this.testObj.ui.submitButton.is(":disabled"),!1,"submit button is enabled when license is present")}),test("success flag should be displayed when license is provided",function(){this.initializeView(),this.sandbox.clock.tick(t.FLAG_TIMEOUT-1),a.notCalled(n.showSuccessMsg),this.sandbox.clock.tick(1),a.calledOnce(n.showSuccessMsg),a.calledWith(n.showSuccessMsg,u.successTitle,u.successContent,r({close:"auto"}))}),test("errors are displayed on all fields when next button is pressed",function(){this.initializeView(),this.testObj.ui.submitButton.trigger("click"),s.each(this.testObj.fields,function(e,i){equal(h(this.testObj.ui[i]).hasClass("hidden"),!1,"Field "+i+" should have errors")},this)}),test("email is required",function(){this.initializeView(),d(this.testObj.ui.email,""),equal(m(this.testObj.ui.email),o.emailRequired,"Email required information should be displayed")}),test("email is invalid",function(){this.initializeView(),s.each(["aString","aStringFinishingWith@","aStringWith@butEndsIn.","a string containing @ but also space"],s.bind(function(e){d(this.testObj.ui.email,e),equal(m(this.testObj.ui.email),o.invalidEmail,"Email invalid error should be displayed for email: "+e)},this))}),test("username is required",function(){this.initializeView(),d(this.testObj.ui.username,""),equal(m(this.testObj.ui.username),o.usernameRequired,"Username required error should be displayed")}),test("username is too long",function(){this.initializeView(),d(this.testObj.ui.username,s.range(t.MAX_USERNAME_LEN+1).map(function(){return"x"}).join("")),equal(m(this.testObj.ui.username),o.tooLongUsername,"Username too long error should be displayed"),d(this.testObj.ui.username,s.range(t.MAX_USERNAME_LEN).map(function(){return"x"}).join("")),c(this.testObj.ui.username)}),test("username is invalid",function(){this.initializeView(),s.each(["aStringContaining&","aStringContaining<","aStringContaining>","a string containing space"],s.bind(function(e){d(this.testObj.ui.username,e),equal(m(this.testObj.ui.username),o.invalidUsername,"Username invalid error should be displayed for username: "+e)},this))}),test("email is propagated to username until it is edited",function(){this.initializeView(),d(this.testObj.ui.email,"charlie@atlassian.com"),equal(this.testObj.ui.emailHidden.val(),"charlie@atlassian.com","Email is processed"),equal(this.testObj.ui.username.val(),"charlie","Username should have been filled by partial email"),d(this.testObj.ui.username,"will"),d(this.testObj.ui.email,"emma@atlassian.com"),equal(this.testObj.ui.emailHidden.val(),"emma@atlassian.com","Email is processed"),equal(this.testObj.ui.username.val(),"will","Username is not changed if edited earlier")}),test("password is required",function(){this.initializeView(),d(this.testObj.ui.password,""),equal(m(this.testObj.ui.password),o.passwordRequired,"Password required error should be displayed")}),test("password retype is required",function(){this.initializeView(),d(this.testObj.ui.retypePassword,""),equal(m(this.testObj.ui.retypePassword),o.passwordRetypeRequired,"Password retype required error should be displayed")}),test("passwords must match",function(){this.initializeView(),d(this.testObj.ui.password,"pass1"),d(this.testObj.ui.retypePassword,"pass2"),equal(m(this.testObj.ui.retypePassword),o.passwordsDoNotMatch,"Passwords do not match should be displayed"),c(this.testObj.ui.password),d(this.testObj.ui.password,"pass2"),this.sandbox.clock.tick(t.VALIDATION_TIMEOUT),c(this.testObj.ui.retypePassword)}),test("errors are displayed with delay as long as user types only on fields touched by user",function(){this.initializeView(),this.testObj.ui.password.val(""),this.testObj.ui.password.trigger("input"),this.sandbox.clock.tick(t.VALIDATION_TIMEOUT-1),s.each(this.testObj.fields,function(e,i){c(this.testObj.ui[i])},this),this.testObj.ui.password.trigger("blur"),b(this.testObj.ui.password),this.testObj.ui.email.val("someInvalidEmail@"),this.testObj.ui.email.trigger("input"),this.sandbox.clock.tick(t.VALIDATION_TIMEOUT-1),b(this.testObj.ui.password),c(this.testObj.ui.email),c(this.testObj.ui.username),c(this.testObj.ui.retypePassword),this.sandbox.clock.tick(1),b(this.testObj.ui.password),b(this.testObj.ui.email),c(this.testObj.ui.username),c(this.testObj.ui.retypePassword)})});