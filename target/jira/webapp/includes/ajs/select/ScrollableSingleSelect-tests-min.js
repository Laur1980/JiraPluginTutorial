AJS.test.require(["jira.webresources:select-pickers"],function(){"use strict";var e=require("jira/ajs/select/scrollable-single-select"),t=require("jquery"),r=require("underscore");module("ScrollableSingleSelect",{setup:function(){this.selectBuilder=function(e){var r,n=t("<select></select>").attr("id","selectTest");r=t("<optgroup></optgroup>").attr("label","Group");for(var o=1;o<=e;o++)r.append('<option value="'+o+'">'+o+"</option>").attr("selected",!1);return n.append(r),n},this.inlineLayerMock={show:t.noop,hide:t.noop,setWidth:t.noop,setPosition:t.noop,$layer:t("<div></div>").css({"max-height":"100px",overflow:"scroll"}).append(t("<div></div>").css("height","1000px")),scroll:function(e){this.$layer[0].scrollTop=e*this.$layer[0].scrollHeight/100,this.$layer.trigger("scroll")},resizeLayer:function(e){this.$layer.children().css("height",e+"px")}},this.inlineLayerMock.$layer.appendTo(t("#qunit-fixture"))}}),test("it should properly fetch new results when scroll treshold is met",function(){var t=this.selectBuilder(20).appendTo("#qunit-fixture"),n=new e({element:t,pageSize:5,newResultsThreshold:50});n.dropdownController=this.inlineLayerMock,n._assignEventsToFurniture(),sinon.spy(n.listController,"generateListFromJSON"),sinon.spy(n,"_fetchNewContent"),sinon.spy(n.listController,"addNextPage"),n._handleCharacterInput(!0),ok(n.listController.generateListFromJSON.calledOnce,"rendered first page"),this.inlineLayerMock.scroll(20),ok(n.listController.generateListFromJSON.calledOnce,"did not render whole list on scroll"),equal(n._fetchNewContent.callCount,0,"did not triggered page add before meeting threshold"),this.inlineLayerMock.scroll(50),ok(n._fetchNewContent.calledOnce,"started fetching content upon meeting threshold"),this.inlineLayerMock.scroll(50),ok(n._fetchNewContent.calledOnce,"fetching content is run asynchronously"),this.inlineLayerMock.resizeLayer(1500),stop(),r.defer(function(){this.inlineLayerMock.scroll(50),ok(n._fetchNewContent.calledTwice,"started fetching second page of results"),ok(n.listController.addNextPage.calledOnce,"rendered first page of results"),start()}.bind(this))}),test("it should display error message when failed to fetch next page",function(){var t=this.selectBuilder(2).appendTo("#qunit-fixture"),n=new e({element:t,pageSize:2});n.dropdownController=this.inlineLayerMock,n._assignEventsToFurniture(),sinon.spy(n.listController,"showPageRenderError"),sinon.stub(n.listController,"addNextPage").throws(),n._handleCharacterInput(!0),this.inlineLayerMock.scroll(90),stop(),r.defer(function(){ok(n.listController.showPageRenderError.calledOnce,"called error footer rendering"),start()})}),test("it should properly filter and paginate results based on user query",function(){var t=this.selectBuilder(20).appendTo("#qunit-fixture"),n=new e({element:t,pageSize:2});n.dropdownController=this.inlineLayerMock,n._assignEventsToFurniture(),sinon.spy(n.listController,"generateListFromJSON"),sinon.spy(n.listController,"addNextPage"),stop(),setTimeout(function(){n.$field.val("a"),n.$field.trigger("input"),ok(n.listController.generateListFromJSON.calledOnce,"key input opens dropdown"),start(),this.inlineLayerMock.scroll(90),stop(),r.defer(function(){ok(n.listController.addNextPage.calledOnce,"query does not interfere with pagination"),start()})}.bind(this),20)})});