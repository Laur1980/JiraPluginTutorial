AJS.test.require(["jira.webresources:jqlautocomplete"],function(){function e(e,t){return l("<option />").attr("value",e).prop("selected",t).data("descriptor",new n({value:e,label:"Does not matter",selected:t}))}function t(e,t){var o=new i({label:e}),n=l("<optgroup />").attr("label",e).data("descriptor",new i({label:e}));return l.each(t,function(){this.appendTo(n),o.addItem(this.data("descriptor"))}),n}var o,l=require("jquery"),n=require("jira/ajs/list/item-descriptor"),i=require("jira/ajs/list/group-descriptor"),p=require("jira/ajs/select/select-model");test("ItemDescriptor",function(){var e=l("<option />"),t=new n({value:"test",title:"I am a test title",selected:!0,label:"I am a test label",styleClass:"test-class",icon:"url()",model:e});equal(t.value(),"test"),equal(t.title(),"I am a test title"),equal(t.label(),"I am a test label"),equal(t.icon(),"url()"),equal(t.selected(),!0),equal(t.styleClass(),"test-class");var o=new XMLSerializer;equal(o.serializeToString(t.model()[0]),o.serializeToString(e[0]),"Expected model() to be jQuery wrapped option element")}),test("GroupDescriptor",function(){var e=l("<optgroup />"),t=new i({label:"I am a test label",weight:10,styleClass:"test-class",showLabel:!0,replace:!0,description:"I am a test description",model:e});equal(t.description(),"I am a test description"),equal(t.label(),"I am a test label"),equal(t.weight(),10),equal(t.showLabel(),!0),equal(t.styleClass(),"test-class");var o=new XMLSerializer;equal(o.serializeToString(t.model()[0]),o.serializeToString(e[0]),"Expected model() to be jQuery wrapped option element")}),test("Setting Selected",function(){function e(e,t,o){var i,p;return o&&(i=l("<option />").attr({value:e,label:t})),p=new n({value:e,label:t,model:i}),o&&i.data("descriptor",p),p}o=p.extend({init:function(){this.options={},this.$element=l("<select multiple='multiple' />")}});var t=new o,i=e("kelly-slator","Kelly Slator",!0);t.$element.append(i.model()),t.setSelected(i),ok(i.model().prop("selected"),"Expected option [Kelly Slator] to be selected"),ok(i.selected(),"Expected descriptor [kellySlaterDescriptor] to be selected");var s=e("kelly-slator","k-dog",!0);t.$element.append(s.model()),t.setSelected(i),ok(s.model().prop("selected")&&i.model().prop("selected"),"Expected option [Kelly Slator] and [k-dog] to be selected"),ok(s.selected()&&i.selected(),"Expected descriptor [kellySlaterDescriptor] and [kdogDescriptor] to be selected");var a=e("andy-irons","Andy Irons",!1);t.setSelected(a),ok(1===t.$element.find("option:contains(Andy Irons)").length,"Expected option to be appended to <select>"),ok(t.$element.find("option:contains(Andy Irons)").prop("selected"),"Expected option [Andy Irons] to be selected"),ok(a.selected(),"Expected descriptor [aiDescriptor] to be selected");var r=new n({highlighted:!0,html:"<b>Actual</b> Label",label:"False, illegitimate, imposter label!",value:"10001"});t.setAllUnSelected(),equal(t.getSelectedValues().length,0,"No options are selected"),t.setSelected(r),equal(t.getSelectedValues().length,1,"1 option is selected"),equal(t.getSelectedValues()[0],"10001","Selected value matches item"),equal(r.selected(),!0,"Item reports itself as selected"),equal(r.highlighted(),!1,"Item is no longer highlighted after it is selected"),equal(r.label(),"Actual Label","Item label is adapted from HTML")}),test("Setting Unselected",function(){function e(e){return l("<option />").attr("value","foo").prop("selected",!0).data("descriptor",{value:function(){return"foo"},selected:function(){return!0},removeOnUnSelect:function(){return e}})}o=p.extend({init:function(){this.options={},this.$element=l("<select multiple='multiple' />"),this.$element.append(e()),this.$element.append(e(!0))}});var t=new o;t.setUnSelected({value:function(){return"foo"}}),ok(!t.$element.find("option").prop("selected"),"Expected option not to be selected"),equal(t.$element.find("option").length,1,"Expected option with value removeOnUnselect to be removed from DOM")}),test("Getting All Descriptors",function(){o=p.extend({init:function(){this.options={},this.$element=l("<select multiple='multiple' />"),this.$element.append(e("1",!0)),this.$element.append(e("2",!1)),this.$element.append(e("3",!1)),this.$element.append(e("4",!0)),this.$element.append(t("group1",[e("group1-1",!0),e("group1-2",!0),e("group1-3",!1),e("group1-4",!1)]))}});var n=new o,s=n.getAllDescriptors();equal(s.length,5,"Expected 5 items (4 options & 1 optgroup"),ok("1"===s[0].value(),"Expected [0] to be option 1"),ok("2"===s[1].value(),"Expected [1] to be option 2"),ok("3"===s[2].value(),"Expected [2] to be option 3"),ok("4"===s[3].value(),"Expected [3] to be option 4"),ok(s[4]instanceof i,"Expected [4] to be optgroup"),equal(s[4].items().length,4,"Expected 1 option in optgroup"),ok("group1-1"===s[4].items()[0].value(),"Expected [4][0] to be group1-1"),ok("group1-2"===s[4].items()[1].value(),"Expected [4][1] to be group1-2"),ok("group1-3"===s[4].items()[2].value(),"Expected [4][2] to be group1-3"),ok("group1-4"===s[4].items()[3].value(),"Expected [4][3] to be group1-4")}),test("Getting Unselected Descriptors",function(){o=p.extend({init:function(){this.options={},this.$element=l("<select multiple='multiple' />"),this.$element.append(e("1",!0)),this.$element.append(e("2",!1)),this.$element.append(e("3",!1)),this.$element.append(e("4",!0)),this.$element.append(t("group1",[e("group1-1",!0),e("group1-2",!0),e("group1-3",!1),e("group1-4",!1)]))}});var n=new o,s=n.getUnSelectedDescriptors();equal(s.length,3,"Expected 3 items (2 options & 1 optgroup"),ok("2"===s[0].value(),"Expected [0] to be option 1"),ok("3"===s[1].value(),"Expected [1] to be option 4"),ok(s[2]instanceof i,"Expected [2] to be optgroup"),equal(s[2].items().length,2,"Expected 1 option in optgroup"),ok("group1-3"===s[2].items()[0].value(),"Expected [2][0] to be group1-3"),ok("group1-4"===s[2].items()[1].value(),"Expected [2][0] to be group1-4")}),test("Parsing &lt;option&gt; to ItemDescriptor",function(){o=p.extend({init:function(){this.options={}}});var e=new o,t=l("<option />");t.attr({model:t}).css({backgroundImage:"url(test.png)"});var i=e._parseOption(t);ok(i instanceof n,"Expected _parseOption to return ItemDescriptor"),ok(t.data("descriptor")==i,"Expected descriptor to be stored on element using jQuery.data")}),test("Removes null option",function(){o=p.extend({init:function(){this.options={removeNullOptions:!0}}});var e=new o,t=l("<option value='0'>").appendTo("<select>").appendTo("#qunit-fixture");e._parseOption(t),ok(1===t.parent().length,"Expected option to only be removed if the value is less than 0"),t.val("-1"),e._parseOption(t),ok(0===t.parent().length,"Expected option to be removed if the value is less than 0")}),test("Selecting descriptor fires change event",function(){var e=l("<select multiple='multiple'><option value='0'>0</option><option value='1'>1</option></select>").appendTo("body"),t=0;e.bind("change",function(){++t});var o=new p({element:e}),n=o.getUnSelectedDescriptors();o.setSelected(n[0]),o.setSelected(n[1]),o.setSelected(n[1]),equal(t,2)})});